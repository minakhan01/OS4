import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;


public class Inode_main {

	public static void main(String[] args) {
		if (args.length==2){
			File input_file = new File(args[0]);
			File file_access_trace = new File(args[1]);
			processFiles(input_file, file_access_trace);
		}
		else{
			System.out.println("Need two input files from the command line: input_file, file_access_trace.");
			System.exit(0);
		}

	}
	
	private static void processFiles(File input_file, File file_access_trace){
		System.out.println("processing files");
		try{
			Scanner input_scanner=new Scanner(input_file);
			readInputScanner(input_scanner);
				try{
					Scanner file_trace_scanner=new Scanner(file_access_trace);
					readAccessScanner(file_trace_scanner);
					}
					catch(FileNotFoundException file_excep){
						System.out.println("File access trace not found");
					}
				}
			catch(FileNotFoundException file_excep){
				System.out.println("Input file not found");
			}
	}
	
	private static void readInputScanner(Scanner input_scanner){
		ArrayList<String> text_file_names=new ArrayList<String>();
		// first line only has header
		if (input_scanner.hasNextLine())
			input_scanner.nextLine();
		while(input_scanner.hasNextLine()){
			String line=input_scanner.nextLine();
			String[] words=line.split(",");
			int block_num=Integer.parseInt(words[0]);
			String data=words[1];
			System.out.println("CREATING block_num: "+block_num+" data: "+data);
			String file_name=String.valueOf(block_num)+".txt";
			text_file_names.add(file_name);
			createBlock(file_name, data);
		}
		addSuperBlock(text_file_names.toArray(new String[text_file_names.size()]));
	}
	
	private static void addSuperBlock(String[] text_file_names){
		String data="";
		for (int i=0;i<text_file_names.length;i++){
			data+=text_file_names[i];
			if (i!= text_file_names.length-1){
				data+="\n";
			}
		}
		createBlock("test_file.txt", data);
		System.out.println("ADDED superblock with data: "+data);
	}
	
	private static void createBlock(String file_name, String data){
		PrintWriter writer;
		try {
			writer = new PrintWriter("input_file/"+file_name);
			writer.println(data);
			writer.close();
			System.out.println("ADDED filename: "+file_name+ "with data: "+data);
		} catch (FileNotFoundException e) {
			System.out.println("Failed to create file");
			e.printStackTrace();
		}
		
	}
	
	private static void readAccessScanner(Scanner input_scanner){
		
		// first line only has 
		if (input_scanner.hasNextLine())
			input_scanner.nextLine();
		while(input_scanner.hasNextLine()){
			String line=input_scanner.nextLine();
			String[] words=line.split(", ");
			String command=words[0];
			int block_num=Integer.parseInt(words[1]);
			if (words.length==3 && command.equals("W")){
				write(block_num, words[2]);
			}
			else{
				read(block_num);
			}
		}
	}
	
	private static void write(int block_num, String data){
		System.out.println("WRITING block_num: "+block_num+" data: "+data);
		String file_name=String.valueOf(block_num)+".txt";
		PrintWriter writer;
		try {
			writer = new PrintWriter("input_file/"+file_name);
			writer.println(data);
			writer.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private static void read(int block_num){
		System.out.println("READING block_num: "+block_num);
		String file_name=String.valueOf(block_num)+".txt";
	}

}
